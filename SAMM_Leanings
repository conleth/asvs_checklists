🔑 1. Kaizen = “Good Change” via Continuous Improvement
Kaizen is a Japanese term meaning "good change." It promotes small, incremental improvements over time.

In AppSec, this means focusing on manageable improvements rather than trying to solve everything at once (“boiling the ocean”).

🧭 2. Pair Kaizen with OWASP SAMM
The OWASP Software Assurance Maturity Model (SAMM) breaks AppSec into discrete activities across five business functions (Governance, Design, Implementation, Verification, Operations).

Combining SAMM with Kaizen enables you to:

Assess current maturity

Create a roadmap of small, prioritized improvements

Track progress over time with clear criteria

🧱 3. Focus on One Drawer at a Time
The metaphor used was: don’t try to clean the whole house, just pick one drawer and do it well.

In AppSec terms, this means: pick one practice (e.g. threat modeling or SAST) and improve it iteratively.

📊 4. Move from Static Reports to Living Dashboards
Traditional maturity assessments (e.g., a PDF report) are quickly outdated.

Instead, use tools like OpenSAMM Toolkit or OpenSAMMY to maintain a live dashboard with expiring scores, continuous updates, and team-level roadmaps.

🧑‍🤝‍🧑 5. Bottom-Up Participation Builds Buy-In
While AppSec leadership often drives maturity improvement, developers and teams should have visibility into the maturity map and contribute to their own roadmap.

Example: a national rail company allowed 200+ teams to self-assess and request AppSec resources bottom-up.

⚖️ 6. SAMM Is for Growth, Not Just Compliance
ISO 27001 and SOC 2 are about compliance, not necessarily improving AppSec processes.

SAMM supports real security improvement over time.

Compliance frameworks can be mapped to SAMM, but the value lies in long-term security posture growth.

🔄 7. Avoid the Points Game Trap
Not all maturity improvements are equal in value. Prioritize what’s impactful, not just what gains points quickly.

Ex: Adding SAST might be easier than implementing threat modeling—but threat modeling may be more valuable in your context.

💡 Final Takeaway
“Don’t be afraid of little steps. If you keep a well-defined map and follow it consistently, small improvements will lead to excellent security outcomes.”


🧠 Top “Hidden Gem” Takeaways from Dag Flachet’s Talk
🧩 1. Kaizen Applied to AppSec = Sustainable Change
Most AppSec leaders get paralyzed by the size of the problem—hundreds of things to fix.

Kaizen reframes this: do one thing really well per cycle.

You don’t need big budgets or full staffing—just momentum and a way to track drift elsewhere.

The “one drawer at a time” metaphor (from 5S lean practice) is a helpful mindset.

🗣️ “You don’t need all the resources. You just need small, consistent steps and a maturity model to track the rest.”

📊 2. SAMM Becomes a Communication Bridge
SAMM isn’t just a tracking model. It:

Helps teams know what "good" looks like

Enables execs to see progress

Provides a shared language between AppSec, developers, and leadership

💡 SAMM gives clarity: You can say “we’re 85% to our target posture in Threat Modeling” vs “we need to improve.”

🔄 3. Stop Treating Assessments Like One-Offs
A big flaw in many orgs: SAMM assessments are point-in-time and used for PowerPoints.

Dag’s recommendation:

Use OpenSAMMY or similar tooling

Build expiration logic so scores go stale (just like vulnerability SLAs)

Keep SAMM as a living program, not an annual event

🕹️ 4. Gamification Is a Double-Edged Sword
Teams naturally want to “score points” and improve their SAMM ratings.

But:

Some controls are low-effort, low-impact

Others (like threat modeling or security requirements) are high-effort, high-impact

You need to prioritize by value, not just what looks good on the maturity report.

🗣️ “Two points in threat modeling may be more impactful than two points from a checklist.”

🧭 5. Developer Visibility Into the Map Matters
Developers don’t need to know Kaizen—but they should see the SAMM roadmap.

When they see why things are being asked of them, buy-in improves.

One European railway company open-sourced its AppSec roadmap internally and let teams opt-in and ask for support.

💡 That flipped the power dynamic and created bottom-up engagement.

🔌 6. SAMM + DSOM = Layered Insights
Use DSOM at the dev team level to measure how security is being built.

Use SAMM at the org level to track maturity across Governance, Design, Implementation, Verification, Operations.

Use DSOM data to fill in the “Implement,” “Design,” and “Verify” SAMM domains.

You get a multi-level picture—and a path to link maturity improvements to delivery teams.

🧱 7. SAMM as a Foundation for Compliance Mapping
Dag points out the fatigue teams feel when filling out:

ISO

SOC 2

NIST

SAMM

Custom internal security checklists

He references projects like OpenCRE and OpenControl aiming to create a mapping backbone, so SAMM can “translate” into ISO controls.

🔗 Imagine: improving your AppSec maturity AND getting ISO compliance with the same data model.

✅ Final Wisdom from Dag
“Don’t be afraid of little steps. As long as the map is clear, you can build something great, one improvement at a time.”

🔍 More Underrated but Strategic Nuggets from the Talk
🧠 1. "Assessment Fairness" Matters More Than You Think
Dag warns about uneven self-assessments:

Some teams are overly generous; others are too harsh on themselves.

If maturity scores feed into KPIs or exec reporting, this inconsistency can break trust or cause resentment.

💡 Solution: A hybrid model where teams self-assess, but the central AppSec team validates scores (and artifacts) for consistency.

🧭 2. Target Postures per Team/Context
Instead of one-size-fits-all, define custom “target postures”:

Customer-facing apps might need high maturity in “Verify”

Internal admin tools might not

Embedded or IoT teams might never get to full coverage in “Operations”

This avoids overburdening teams with irrelevant goals and improves strategy alignment.

🧰 3. Kaizen = Better Resource Justification
A major unlock:

“You don’t need to say we’re failing at security. You can now say we’ve improved 2 points in implementation, and here’s where more support would move the needle.”

This reframes AppSec from being a blocker to being:

A program of growth

With measurable ROI

Backed by data from real teams

Execs love progress metrics, not just “we’re not compliant.”

🧪 4. Experimentation Encouraged
Dag references companies like the railway firm that allow teams to opt in to SAMM assessments, propose roadmaps, and request security resources.

That flips the narrative from:

“Security is telling us what to do”
to
“We’re choosing to level up and getting support.”

Even if not all teams do this, enabling the option creates pull—especially among high-performing or security-conscious teams.

🧬 5. SAMM v3 Is Coming — Contribute Now
Dag casually drops that SAMM v3 is in development, and the team is actively soliciting community feedback.

If you’ve been annoyed by anything in SAMM 2.0—now’s your chance to shape the next version.

Here’s what you can do:

Review the SAMM GitHub Issues

Submit use cases, challenges, or edge cases your org faces

Help modernize it to better integrate with agile/DevOps/AI models

📣 6. SAMM as a Storytelling Tool
Dag emphasizes that SAMM isn’t just a measurement tool—it’s a narrative driver.

Example:

“We’re here today. Our roadmap gets us to this level in 6 months. Here’s what it unlocks (less risk, faster delivery, compliance).”

That’s a story that:

Execs can sponsor

Teams can buy into

And security leaders can lead confidently

🧭 7. SAMM Enables Repeatable, Documented Process
This one's implicit: SAMM’s value grows because it's structured, documented, and objective.

So when stakeholders change, priorities shift, or audits happen—you don’t lose the plot.

If you’re building a Center of Excellence or Security Champions program, SAMM gives you the bedrock for:

Training plans

OKRs

Team-level enablement

🧠 Final Round: Deep Strategy Insights from Dag’s Talk
🧬 1. Maturity Models as Operating Systems
Dag frames SAMM not as a checklist—but as an operating system for your AppSec function:

You have a backlog (SAMM activities).

You run sprints (Kaizen cycles).

You have a scoreboard (dashboard).

And a product roadmap (your maturity goals).

In this sense, AppSec becomes a product, not a service. That’s a shift in mindset with big implications:

You now prioritize features (practices)

Have a product lifecycle (maturity progression)

And customer feedback loops (from developers, champions, and leadership)

🔄 2. Kaizen Solves the “Frozen Middle” Problem
In many organizations, AppSec leadership gets it, and developers want support, but middle management (e.g., product owners, engineering managers) block progress because of timelines, budgets, or inertia.

Kaizen helps here:

You propose small, non-threatening changes

With clear ROI

That don’t require organizational restructure

And can be run autonomously by teams

Instead of asking for buy-in for an overhaul, you’re asking for a 2-week improvement cycle on a specific capability.

🔍 3. SAMM Reveals Systemic Gaps and Redundancy
Dag hints at this when talking about duplicated assessments (ISO, SOC2, etc.) and different teams scoring themselves differently.

Once you run multiple SAMM assessments across an org, you’ll see:

Redundant tools (e.g., 3 types of SAST)

Gaps in ownership (nobody owns secure architecture)

Misaligned maturity (team A is doing secure coding training, team B isn’t)

This is your blueprint for:

Rationalizing tools

Standardizing processes

Creating a federated model with regional AppSec leads or champions

🧑‍💼 4. SAMM Enables Board-Level Communication
Dag alludes to this in passing, but it’s critical:

With SAMM, you can say:

"We’ve improved our verify maturity by 30% across critical apps"

"We’re 85% to our quarterly target posture"

"Our threat modeling coverage is now 62% org-wide"

That’s boardroom language—and it moves the conversation from:

“Are we secure?”
to
“How much more secure are we than last quarter?”

🧠 5. SAMM Makes Security Champion Programs Scalable
He didn’t say it directly, but here’s the play:

Each Security Champion team is responsible for advancing their SAMM posture over time

You assign champions based on SAMM domains (e.g., one champion owns Threat Modeling per BU)

Kaizen gives them bite-sized actions

The dashboard shows champion impact

This reduces the hero work model (1 AppSec engineer per 100 devs) and lets you scale AppSec by influence, not just headcount.

🧭 6. You Can Use SAMM + Kaizen as a Hiring Filter
This one's subtle but huge:

Teams that respond well to SAMM + Kaizen cycles are the ones you want to invest in.

You’ll quickly see which teams:

Consistently improve

Own their roadmap

Ask smart security questions

Build good documentation

These become your pilot teams, your security early adopters, and your internal case studies for the org.

🔐 7. Kaizen Protects Against Tool Fatigue
AppSec is flooded with shiny new tools—SCA, AI-assisted SAST, CI/CD scanners, etc.

Kaizen + SAMM gives you a way to evaluate tool effectiveness over time, not just at purchase:

Is it helping us improve our SAMM posture?

Is it reducing manual effort or just shifting it?

Is it driving meaningful maturity in a domain?

This guards against tool sprawl and lets you invest where it matters most.

🎯 Bottom Line
Dag’s talk isn’t just about process—it’s about how to turn AppSec from reactive firefighting into a system of continuous, meaningful growth.

SAMM gives you structure.
Kaizen gives you momentum.
Together, they let you scale AppSec leadership without scaling chaos.


